# Example configuration for the dc43 service backends package.
# Copy this file to a writable location (e.g. /etc/dc43/service-backends.toml)
# and adjust the values to match your environment.

# Environment variables (`DC43_CONTRACT_STORE_TYPE`, `DC43_CONTRACT_STORE_DSN`,
# etc.) override the values below at runtime, which is helpful for Terraform or
# container orchestrators that inject secrets without editing the file.

# ---------------------------------------------------------------------------
# Filesystem-backed contract store
# ---------------------------------------------------------------------------
[contract_store]
type = "filesystem"
# Absolute or relative path to the contract store directory. The application
# creates the directory when it does not exist. Use "~" to reference the
# current user's home directory.
root = "./contracts"

# ---------------------------------------------------------------------------
# Collibra stub contract store (uncomment this block and comment the filesystem
# configuration above if you want to emulate Collibra locally).
# ---------------------------------------------------------------------------
# [contract_store]
# type = "collibra_stub"
# # Optional location for the stub cache on disk. Leave blank to use a temp dir.
# base_path = "./.collibra-cache"
# # Apply a workflow status when contracts are written.
# default_status = "Draft"
# # Limit visible versions to a specific status (e.g. Validated).
# status_filter = ""
#
# [contract_store.catalog."product-quality"]
# data_product = "data-products/customer"
# port = "gold-quality"

# ---------------------------------------------------------------------------
# SQL contract store (uncomment to persist contracts in PostgreSQL, MySQL,
# SQLite, etc.). Install the ``sql`` extra or ensure ``sqlalchemy`` is available.
# ---------------------------------------------------------------------------
# [contract_store]
# type = "sql"
# dsn = "postgresql+psycopg://user:password@db.internal/dc43"
# table = "contracts"
# schema = "governance"

# ---------------------------------------------------------------------------
# Collibra HTTP contract store (uncomment when pointing at a live Collibra
# deployment).
# ---------------------------------------------------------------------------
# [contract_store]
# type = "collibra_http"
# base_url = "https://collibra.example.com"
# token = "$COLLIBRA_API_TOKEN"
# timeout = 10.0
# default_status = "Draft"
# status_filter = "Validated"
# contracts_endpoint_template = "/rest/2.0/dataproducts/{data_product}/ports/{port}/contracts"
#
# [contract_store.catalog."product-quality"]
# data_product = "data-products/customer"
# port = "gold-quality"

[auth]
# Optional bearer token that clients must supply via the Authorization header.
# Leave blank to disable token authentication during development.
token = "change-me"

# ---------------------------------------------------------------------------
# Data product store (defaults to the in-memory stub)
# ---------------------------------------------------------------------------
[data_product]
type = "memory"
# Set to a writable directory when using the filesystem backend.
root = "./data-products"
# Provide a Unity Catalog table name when ``type = "delta"``.
table = ""

# ---------------------------------------------------------------------------
# Data-quality backend (defaults to the embedded engine)
# ---------------------------------------------------------------------------
[data_quality]
type = "local"
# Selects the engine used when contracts do not specify one explicitly.
default_engine = "native"
# Uncomment to point the built-in engine at Great Expectations or Soda metrics.
# [data_quality.engines.great_expectations]
# suite_path = "./expectations/orders.json"
# metrics_key = "great_expectations"
# [data_quality.engines.soda]
# checks_path = "./checks/orders.yml"
# metrics_key = "soda"
# Uncomment when delegating to a remote observability service.
# type = "http"
# base_url = "https://quality.example.com"
# token = "$DQ_SERVICE_TOKEN"
# token_header = "Authorization"
# token_scheme = "Bearer"

[governance_store]
type = "memory"
# Persist governance artefacts on disk.
# type = "filesystem"
# root = "./governance"
# Use SQL or Delta-backed persistence.
# type = "sql"
# dsn = "postgresql+psycopg://user:password@db.internal/dc43"
# status_table = "dq_status"
# activity_table = "dq_activity"
# link_table = "dq_links"
# type = "delta"
# base_path = "./delta/governance"
# status_table = "governance.status"
# activity_table = "governance.activity"
# link_table = "governance.links"
# Delegate to a remote governance service.
# type = "http"
# base_url = "https://governance.example.com"
# token = "$GOVERNANCE_TOKEN"
