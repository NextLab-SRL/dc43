name: ci

on:
  pull_request:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      publish_docker_images:
        description: "Build and push the release Docker images to Amazon ECR"
        type: boolean
        default: false
      docker_image_tag:
        description: "Tag to apply when pushing Docker images (defaults to commit SHA)"
        required: false

jobs:
  tests:
    name: ${{ matrix.display }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - display: meta
            install: |
              pip install -e . --no-deps
            test_command: "pytest tests -q"
          - display: service-clients
            install: "pip install -e packages/dc43-service-clients[test]"
            test_command: "pytest packages/dc43-service-clients/tests -q"
          - display: service-backends
            install: |
              pip install -e . --no-deps
              pip install "dc43-service-clients[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-clients"
              pip install "dc43-service-backends[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-backends"
            test_command: "pytest packages/dc43-service-backends/tests -q"
          - display: integrations
            install: |
              pip install -e . --no-deps
              pip install "dc43-service-clients[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-clients"
              pip install "dc43-service-backends[sql] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-backends"
              pip install "dc43-integrations[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-integrations"
            test_command: "pytest packages/dc43-integrations/tests -q"
          - display: contracts-app
            install: |
              pip install -e . --no-deps
              pip install "dc43-service-clients[http] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-clients"
              pip install fastapi jinja2 python-multipart pyspark
              pip install "sqlalchemy>=2.0"
              pip install --no-deps "dc43-service-backends[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-backends"
              pip install --no-deps "dc43-integrations[spark] @ file://${GITHUB_WORKSPACE}/packages/dc43-integrations"
              pip install --no-deps "dc43-contracts-app[spark] @ file://${GITHUB_WORKSPACE}/packages/dc43-contracts-app"
            test_command: "pytest packages/dc43-contracts-app/tests -q"
          - display: demo-app
            install: |
              pip install -e . --no-deps
              pip install fastapi jinja2 python-multipart uvicorn pyspark httpx "sqlalchemy>=2.0"
              pip install "open-data-contract-standard==3.0.2"
              pip install --no-deps "dc43-service-clients[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-clients"
              pip install --no-deps "dc43-service-backends[test] @ file://${GITHUB_WORKSPACE}/packages/dc43-service-backends"
              pip install --no-deps "dc43-integrations[spark] @ file://${GITHUB_WORKSPACE}/packages/dc43-integrations"
              pip install --no-deps "dc43-contracts-app[spark] @ file://${GITHUB_WORKSPACE}/packages/dc43-contracts-app"
              pip install --no-deps "dc43-demo-app @ file://${GITHUB_WORKSPACE}/packages/dc43-demo-app"
            test_command: "pytest packages/dc43-demo-app/tests -q"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install packaging build pytest
          ${{ matrix.install }}

      - name: Run tests
        run: ${{ matrix.test_command }}

  docker-ecr-smoke:
    name: Docker image smoke publish
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_docker_images == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      IMAGE_TAG: ${{ github.event.inputs.docker_image_tag || github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push smoke-test images
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CONTRACTS_REPOSITORY: ${{ secrets.AWS_ECR_CONTRACTS_APP_REPOSITORY }}
          BACKEND_REPOSITORY: ${{ secrets.AWS_ECR_HTTP_BACKEND_REPOSITORY }}
        run: |
          set -euo pipefail

          build_and_push() {
            local image_name=$1
            local dockerfile=$2
            local repository=$3

            echo "::group::Building ${image_name} image"
            docker build -f "$dockerfile" -t "$REGISTRY/$repository:$IMAGE_TAG" .
            docker push "$REGISTRY/$repository:$IMAGE_TAG"
            docker tag "$REGISTRY/$repository:$IMAGE_TAG" "$REGISTRY/$repository:latest"
            docker push "$REGISTRY/$repository:latest"
            echo "::endgroup::"
          }

          build_and_push "contracts-app" "deploy/contracts-app/Dockerfile" "$CONTRACTS_REPOSITORY"
          build_and_push "http-backend" "deploy/http-backend/Dockerfile" "$BACKEND_REPOSITORY"

