name: release

concurrency:
  group: release-packages
  cancel-in-progress: false

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  determine:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.summarize.outputs.should_run }}
      packages_to_release: ${{ steps.summarize.outputs.packages_to_release }}
      core_tag: ${{ steps.summarize.outputs.core_tag }}
      service_clients_tag: ${{ steps.summarize.outputs.service_clients_tag }}
      service_backends_tag: ${{ steps.summarize.outputs.service_backends_tag }}
      integrations_tag: ${{ steps.summarize.outputs.integrations_tag }}
      contracts_app_tag: ${{ steps.summarize.outputs.contracts_app_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Compute release plan
        run: |
          set -euo pipefail
          python scripts/release.py \
            --commit "$GITHUB_SHA" \
            --json-output plan.json \
            --allow-missing-release-marker

      - name: Summarize release plan
        id: summarize
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          plan = json.loads(Path("plan.json").read_text(encoding="utf-8"))
          packages = plan.get("packages", [])

          rows = ["### Release plan", "| Package | Version | Needs release | Tag |", "| --- | --- | --- | --- |"]
          releasing = []
          has_warnings = False

          key_map = {
              "dc43": "core_tag",
              "dc43-service-clients": "service_clients_tag",
              "dc43-service-backends": "service_backends_tag",
              "dc43-integrations": "integrations_tag",
              "dc43-contracts-app": "contracts_app_tag",
          }

          outputs = {name: "" for name in key_map.values()}
          warning_lines = []

          for entry in packages:
              package = entry["package"]
              version = entry.get("version", "—")
              tag = entry.get("tag", "")
              needs_release = bool(entry.get("needs_release"))
              warnings = entry.get("warnings", []) or []
              rows.append(
                  f"| {package} | {version} | {'yes' if needs_release else 'no'} | {tag if needs_release else '—'} |"
              )
              key = key_map.get(package)
              if key:
                  outputs[key] = tag if needs_release else ""
              if needs_release:
                  releasing.append(package)
              if warnings:
                  has_warnings = True
                  for message in warnings:
                      warning_lines.append(f"* **{package}**: {message}")

          if warning_lines:
              rows.append("")
              rows.append("### Warnings")
              rows.extend(warning_lines)

          outputs["packages_to_release"] = " ".join(releasing)
          outputs["should_run"] = "true" if releasing and not has_warnings else "false"
          outputs["has_warnings"] = "true" if has_warnings else "false"

          summary_path = Path(os.environ["GITHUB_STEP_SUMMARY"])
          summary_path.write_text("\n".join(rows) + "\n", encoding="utf-8")

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              for key, value in outputs.items():
                  fh.write(f"{key}={value}\n")
          PY

      - uses: actions/upload-artifact@v4
        with:
          name: release-plan
          path: plan.json

      - name: Fail on release warnings
        if: steps.summarize.outputs.has_warnings == 'true'
        run: |
          echo "Release plan contains warnings. See the job summary for details." >&2
          exit 1

  release:
    needs: determine
    if: needs.determine.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare build tooling
        run: |
          python -m pip install --upgrade pip
          pip install packaging build

      - name: Prepare artifact directory
        run: mkdir -p release-artifacts

      - name: Record release plan
        env:
          CORE_TAG: ${{ needs.determine.outputs.core_tag }}
          SERVICE_CLIENTS_TAG: ${{ needs.determine.outputs.service_clients_tag }}
          SERVICE_BACKENDS_TAG: ${{ needs.determine.outputs.service_backends_tag }}
          INTEGRATIONS_TAG: ${{ needs.determine.outputs.integrations_tag }}
          CONTRACTS_APP_TAG: ${{ needs.determine.outputs.contracts_app_tag }}
        run: |
          set -euo pipefail
          core_tag=${CORE_TAG:-—}
          clients_tag=${SERVICE_CLIENTS_TAG:-—}
          backends_tag=${SERVICE_BACKENDS_TAG:-—}
          integrations_tag=${INTEGRATIONS_TAG:-—}
          contracts_tag=${CONTRACTS_APP_TAG:-—}

          cat <<SUMMARY >> "$GITHUB_STEP_SUMMARY"
          ### Packages to release
          | Package | Tag |
          | --- | --- |
          | dc43 | ${core_tag} |
          | dc43-service-clients | ${clients_tag} |
          | dc43-service-backends | ${backends_tag} |
          | dc43-integrations | ${integrations_tag} |
          | dc43-contracts-app | ${contracts_tag} |
          SUMMARY

      - name: Build dc43
        if: needs.determine.outputs.core_tag != ''
        env:
          TAG_NAME: ${{ needs.determine.outputs.core_tag }}
          TAG_PREFIX: dc43-v
          VERSION_FILE: VERSION
        run: |
          set -euo pipefail
          pip install -e '.[test]'
          pytest
          python scripts/check_tag_version.py \
            --tag "$TAG_NAME" \
            --prefix "$TAG_PREFIX" \
            --version-file "$VERSION_FILE"
          rm -rf release-artifacts/dc43
          python -m build --outdir release-artifacts/dc43

      - name: Build dc43-service-clients
        if: needs.determine.outputs.service_clients_tag != ''
        env:
          TAG_NAME: ${{ needs.determine.outputs.service_clients_tag }}
          TAG_PREFIX: dc43-service-clients-v
          VERSION_FILE: packages/dc43-service-clients/VERSION
        run: |
          set -euo pipefail
          pip install -e packages/dc43-service-clients[test]
          pytest packages/dc43-service-clients/tests
          python scripts/check_tag_version.py \
            --tag "$TAG_NAME" \
            --prefix "$TAG_PREFIX" \
            --version-file "$VERSION_FILE"
          rm -rf release-artifacts/dc43-service-clients
          (cd packages/dc43-service-clients && python -m build --outdir ../../release-artifacts/dc43-service-clients)

      - name: Build dc43-service-backends
        if: needs.determine.outputs.service_backends_tag != ''
        env:
          TAG_NAME: ${{ needs.determine.outputs.service_backends_tag }}
          TAG_PREFIX: dc43-service-backends-v
          VERSION_FILE: packages/dc43-service-backends/VERSION
        run: |
          set -euo pipefail
          pip install -e .
          pip install -e packages/dc43-service-clients
          pip install -e packages/dc43-service-backends[test]
          pytest packages/dc43-service-backends/tests
          python scripts/check_tag_version.py \
            --tag "$TAG_NAME" \
            --prefix "$TAG_PREFIX" \
            --version-file "$VERSION_FILE"
          rm -rf release-artifacts/dc43-service-backends
          (cd packages/dc43-service-backends && python -m build --outdir ../../release-artifacts/dc43-service-backends)

      - name: Build dc43-integrations
        if: needs.determine.outputs.integrations_tag != ''
        env:
          TAG_NAME: ${{ needs.determine.outputs.integrations_tag }}
          TAG_PREFIX: dc43-integrations-v
          VERSION_FILE: packages/dc43-integrations/VERSION
        run: |
          set -euo pipefail
          pip install -e packages/dc43-service-clients
          pip install -e packages/dc43-integrations[test]
          pytest packages/dc43-integrations/tests
          python scripts/check_tag_version.py \
            --tag "$TAG_NAME" \
            --prefix "$TAG_PREFIX" \
            --version-file "$VERSION_FILE"
          rm -rf release-artifacts/dc43-integrations
          (cd packages/dc43-integrations && python -m build --outdir ../../release-artifacts/dc43-integrations)

      - name: Build dc43-contracts-app
        if: needs.determine.outputs.contracts_app_tag != ''
        env:
          TAG_NAME: ${{ needs.determine.outputs.contracts_app_tag }}
          TAG_PREFIX: dc43-contracts-app-v
          VERSION_FILE: packages/dc43-contracts-app/VERSION
        run: |
          set -euo pipefail
          pip install -e .
          pip install -e packages/dc43-service-clients
          pip install -e packages/dc43-service-backends
          pip install -e packages/dc43-integrations
          pip install -e packages/dc43-contracts-app[spark]
          pytest packages/dc43-contracts-app/tests
          python scripts/check_tag_version.py \
            --tag "$TAG_NAME" \
            --prefix "$TAG_PREFIX" \
            --version-file "$VERSION_FILE"
          rm -rf release-artifacts/dc43-contracts-app
          (cd packages/dc43-contracts-app && python -m build --outdir ../../release-artifacts/dc43-contracts-app)

      - name: Publish dc43 to PyPI
        if: needs.determine.outputs.core_tag != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: release-artifacts/dc43

      - name: Publish dc43-service-clients to PyPI
        if: needs.determine.outputs.service_clients_tag != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: release-artifacts/dc43-service-clients

      - name: Publish dc43-service-backends to PyPI
        if: needs.determine.outputs.service_backends_tag != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: release-artifacts/dc43-service-backends

      - name: Publish dc43-integrations to PyPI
        if: needs.determine.outputs.integrations_tag != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: release-artifacts/dc43-integrations

      - name: Publish dc43-contracts-app to PyPI
        if: needs.determine.outputs.contracts_app_tag != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: release-artifacts/dc43-contracts-app

      - name: Create release tags
        if: needs.determine.outputs.packages_to_release != ''
        env:
          RELEASE_PACKAGES: ${{ needs.determine.outputs.packages_to_release }}
        run: |
          set -euo pipefail
          packages="$RELEASE_PACKAGES"
          if [ -z "$packages" ]; then
            echo "No packages require tagging."
            exit 0
          fi
          python scripts/release.py \
            --commit "$GITHUB_SHA" \
            --packages $packages \
            --apply --push \
            --allow-missing-release-marker

      - name: Publish dc43 GitHub release
        if: needs.determine.outputs.core_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine.outputs.core_tag }}
          files: release-artifacts/dc43/*
          generate_release_notes: true

      - name: Publish dc43-service-clients GitHub release
        if: needs.determine.outputs.service_clients_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine.outputs.service_clients_tag }}
          files: release-artifacts/dc43-service-clients/*
          generate_release_notes: true

      - name: Publish dc43-service-backends GitHub release
        if: needs.determine.outputs.service_backends_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine.outputs.service_backends_tag }}
          files: release-artifacts/dc43-service-backends/*
          generate_release_notes: true

      - name: Publish dc43-integrations GitHub release
        if: needs.determine.outputs.integrations_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine.outputs.integrations_tag }}
          files: release-artifacts/dc43-integrations/*
          generate_release_notes: true

      - name: Publish dc43-contracts-app GitHub release
        if: needs.determine.outputs.contracts_app_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine.outputs.contracts_app_tag }}
          files: release-artifacts/dc43-contracts-app/*
          generate_release_notes: true
